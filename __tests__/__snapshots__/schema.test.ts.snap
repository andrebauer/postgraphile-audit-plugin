// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema: external schema with plugin 1`] = `
"""An interface for all Audited types."""
interface Audited {
  firstAuditEvent: AuditEvent!
  lastAuditEvent: AuditEvent!
  createdAt: String!
  lastModifiedAt: String!
  auditEvents(first: Int, last: Int, offset: Int, before: Cursor, after: Cursor): AuditEventsConnection!
}

type AuditEvent {
  id: BigInt
  auditId: BigInt
  eventId: Int
  transactionId: Int
  stmtDate: Datetime
  sessionInfo: JSON
  valuesBefore: JSON
  valuesAfter: JSON
  userName: String!
}

"""A connection to a list of \`AuditEvent\` values."""
type AuditEventsConnection {
  """A list of \`AuditEvent\` objects."""
  nodes: [AuditEvent]!

  """
  A list of edges which contains the \`AuditEvent\` and cursor to aid in pagination.
  """
  edges: [AuditEventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`AuditEvent\` you could get from the connection."""
  totalCount: Int!
}

"""A \`AuditEvent\` edge in the connection."""
type AuditEventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`AuditEvent\` at the end of the edge."""
  node: AuditEvent
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Email implements Node & Audited {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  email: String!

  """Reads and enables pagination through a set of \`UsersEmail\`."""
  usersEmailsByEmailIdList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`UsersEmail\`."""
    orderBy: [UsersEmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersEmailCondition
  ): [UsersEmail!]!
  firstAuditEvent: AuditEvent!
  lastAuditEvent: AuditEvent!
  createdAt: String!
  lastModifiedAt: String!
  auditEvents(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): AuditEventsConnection!
}

"""
A condition to be used against \`Email\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EmailCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`email\` field."""
  email: String
}

"""Methods to use when ordering \`Email\`."""
enum EmailsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  LAST_MODIFIED_AT_ASC
  LAST_MODIFIED_AT_DESC
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """Reads a set of \`Email\`."""
  allEmailsList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Email\`."""
    orderBy: [EmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailCondition
  ): [Email!]

  """Reads a set of \`User\`."""
  allUsersList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`User\`."""
    orderBy: [UsersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): [User!]

  """Reads a set of \`UsersEmail\`."""
  allUsersEmailsList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`UsersEmail\`."""
    orderBy: [UsersEmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersEmailCondition
  ): [UsersEmail!]
  emailById(id: Int!): Email
  userById(id: Int!): User
  usersEmailByUserIdAndEmailId(userId: Int!, emailId: Int!): UsersEmail

  """Reads and enables pagination through a set of \`AuditEvent\`."""
  getAuditInformationList(
    _auditId: BigInt
    _schemaName: String
    _tableName: String

    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int
  ): [AuditEvent]

  """Reads a single \`Email\` using its globally unique \`ID\`."""
  email(
    """The globally unique \`ID\` to be used in selecting a single \`Email\`."""
    nodeId: ID!
  ): Email

  """Reads a single \`User\` using its globally unique \`ID\`."""
  user(
    """The globally unique \`ID\` to be used in selecting a single \`User\`."""
    nodeId: ID!
  ): User

  """Reads a single \`UsersEmail\` using its globally unique \`ID\`."""
  usersEmail(
    """
    The globally unique \`ID\` to be used in selecting a single \`UsersEmail\`.
    """
    nodeId: ID!
  ): UsersEmail
}

type User implements Node & Audited {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  firstName: String!
  lastName: String!

  """Reads and enables pagination through a set of \`UsersEmail\`."""
  usersEmailsByUserIdList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`UsersEmail\`."""
    orderBy: [UsersEmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersEmailCondition
  ): [UsersEmail!]!
  firstAuditEvent: AuditEvent!
  lastAuditEvent: AuditEvent!
  createdAt: String!
  lastModifiedAt: String!
  auditEvents(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): AuditEventsConnection!
}

"""
A condition to be used against \`User\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`firstName\` field."""
  firstName: String

  """Checks for equality with the object’s \`lastName\` field."""
  lastName: String
}

type UsersEmail implements Node & Audited {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: Int!
  emailId: Int!

  """Reads a single \`User\` that is related to this \`UsersEmail\`."""
  userByUserId: User

  """Reads a single \`Email\` that is related to this \`UsersEmail\`."""
  emailByEmailId: Email
  firstAuditEvent: AuditEvent!
  lastAuditEvent: AuditEvent!
  createdAt: String!
  lastModifiedAt: String!
  auditEvents(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): AuditEventsConnection!
}

"""
A condition to be used against \`UsersEmail\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UsersEmailCondition {
  """Checks for equality with the object’s \`userId\` field."""
  userId: Int

  """Checks for equality with the object’s \`emailId\` field."""
  emailId: Int
}

"""Methods to use when ordering \`UsersEmail\`."""
enum UsersEmailsOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  EMAIL_ID_ASC
  EMAIL_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  LAST_MODIFIED_AT_ASC
  LAST_MODIFIED_AT_DESC
}

"""Methods to use when ordering \`User\`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  LAST_MODIFIED_AT_ASC
  LAST_MODIFIED_AT_DESC
}

`;

exports[`schema: external schema without plugin 1`] = `
type AuditEvent {
  id: BigInt
  auditId: BigInt
  eventId: Int
  transactionId: Int
  userName: String
  stmtDate: Datetime
  sessionInfo: JSON
  valuesBefore: JSON
  valuesAfter: JSON
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Email implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  email: String!
  auditId: BigInt!

  """Reads and enables pagination through a set of \`UsersEmail\`."""
  usersEmailsByEmailIdList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`UsersEmail\`."""
    orderBy: [UsersEmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersEmailCondition
  ): [UsersEmail!]!
}

"""
A condition to be used against \`Email\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EmailCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`email\` field."""
  email: String

  """Checks for equality with the object’s \`auditId\` field."""
  auditId: BigInt
}

"""Methods to use when ordering \`Email\`."""
enum EmailsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  AUDIT_ID_ASC
  AUDIT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """Reads a set of \`Email\`."""
  allEmailsList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Email\`."""
    orderBy: [EmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailCondition
  ): [Email!]

  """Reads a set of \`User\`."""
  allUsersList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`User\`."""
    orderBy: [UsersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): [User!]

  """Reads a set of \`UsersEmail\`."""
  allUsersEmailsList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`UsersEmail\`."""
    orderBy: [UsersEmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersEmailCondition
  ): [UsersEmail!]
  emailById(id: Int!): Email
  emailByAuditId(auditId: BigInt!): Email
  userById(id: Int!): User
  userByAuditId(auditId: BigInt!): User
  usersEmailByUserIdAndEmailId(userId: Int!, emailId: Int!): UsersEmail
  usersEmailByAuditId(auditId: BigInt!): UsersEmail

  """Reads and enables pagination through a set of \`AuditEvent\`."""
  getAuditInformationList(
    _auditId: BigInt
    _schemaName: String
    _tableName: String

    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int
  ): [AuditEvent]

  """Reads a single \`Email\` using its globally unique \`ID\`."""
  email(
    """The globally unique \`ID\` to be used in selecting a single \`Email\`."""
    nodeId: ID!
  ): Email

  """Reads a single \`User\` using its globally unique \`ID\`."""
  user(
    """The globally unique \`ID\` to be used in selecting a single \`User\`."""
    nodeId: ID!
  ): User

  """Reads a single \`UsersEmail\` using its globally unique \`ID\`."""
  usersEmail(
    """
    The globally unique \`ID\` to be used in selecting a single \`UsersEmail\`.
    """
    nodeId: ID!
  ): UsersEmail
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  firstName: String!
  lastName: String!
  auditId: BigInt!

  """Reads and enables pagination through a set of \`UsersEmail\`."""
  usersEmailsByUserIdList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`UsersEmail\`."""
    orderBy: [UsersEmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersEmailCondition
  ): [UsersEmail!]!
}

"""
A condition to be used against \`User\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`firstName\` field."""
  firstName: String

  """Checks for equality with the object’s \`lastName\` field."""
  lastName: String

  """Checks for equality with the object’s \`auditId\` field."""
  auditId: BigInt
}

type UsersEmail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: Int!
  emailId: Int!
  auditId: BigInt!

  """Reads a single \`User\` that is related to this \`UsersEmail\`."""
  userByUserId: User

  """Reads a single \`Email\` that is related to this \`UsersEmail\`."""
  emailByEmailId: Email
}

"""
A condition to be used against \`UsersEmail\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UsersEmailCondition {
  """Checks for equality with the object’s \`userId\` field."""
  userId: Int

  """Checks for equality with the object’s \`emailId\` field."""
  emailId: Int

  """Checks for equality with the object’s \`auditId\` field."""
  auditId: BigInt
}

"""Methods to use when ordering \`UsersEmail\`."""
enum UsersEmailsOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  EMAIL_ID_ASC
  EMAIL_ID_DESC
  AUDIT_ID_ASC
  AUDIT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering \`User\`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  AUDIT_ID_ASC
  AUDIT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

`;
